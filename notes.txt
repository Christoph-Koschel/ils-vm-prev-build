Instruction format:
header 2bits
data 30bits

header format:
-1 => negative integer
 0 => positive integer
 1 => primitive instruction

Instruction table
0  => halt          // ends the vm @deprecated
1  => add           // add to numbers
2  => sub           // subs to numbers
3  => mul           // multiple to numbers
4  => div           // divide to numbers
5  => invoke        // invokes a function
6  => jump          // jumps to the address
7  => return        // returns to invoke_count
8  => load reg      // loads the value of the registers on top of the stack
9  => save reg      // saves the value on top of the stack into the register
10 => load          // load the value with the pointer on top of the stack
11 => save          // saves the value into the pointers memory place
12 => swap          // swaps the two top values on the stack
13 => dup           // duplicates the top value on the stack
14 => invoke_native //
15 => jump_zero     // jump if the value on top of the stack is zero
16 => jump_one      // jump if the value on top of the stack is not zero
17 => pop           // pop value from the stack
18 => value_return  // returns the last value of the stack and returns to invoke_count

Memory format:
[PROGRAM]
[STACK]
[EMPTY]
[HEAP]

Stack format:
[Return address]
[Parameter count]
[Parameter stack]
[Parameter count]
[Old start stack pointer position]
[Memory stack]

Registers:
0: ic => instruction counter      // current instruction
1: sp => stack pointer            // pointer to the top of the stack
2: ssp => stack start pointer     // pointer to the start of the stack (last instuction + 1)
3: hp => heap pointer            // pointer to the bottom of the heap (memory size - heap size)
4: shp => start heap pointer      // pointer to the start of the heap (memory size)

Invoke format:
[Parameter 1]
[Parameter 2]
[Parameter n]
[Parameter n+1]
[Target address]
[N Count]


